@page "/game/{RoomGuid}"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using Blazor.Extensions.Canvas.Canvas2D
@using MessagePack
@using SnakeVS.Shared

@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime
@inject ILoggerFactory LoggerFactory
@inject UserState userState


<PageTitle>Snake VS</PageTitle>
<div class="container-fluid" style="max-width: 500px">
    <button @onclick="goBack" class="btn btn-outline-danger"> BACK </button><br /><br />
    <p>@userState.UserName</p>
    <div style="margin: 10px;">
        <button @onclick="joinBlue" class="btn btn-primary" style="width: 110px;">Set Blue</button>
        <button @onclick="joinRed" class="btn btn-danger" style="width: 110px;">Set Red</button>
    </div>
    
    <div style="margin: 10px; height: 30px;">
        @if (userState?.UserName == roomContext?.BlueName || userState?.UserName == roomContext?.RedName)
        {
            <button @onclick="leavePlace" class="btn btn-warning" style="width: 220px;">Leave</button>
        }
    </div>
    
    <br/>
    <span style="color:blue">Blue: @roomContext?.BlueName</span><br/>
    <span style="color:red">Red: @roomContext?.RedName</span><br/>
    <div class="container">
        <div><button style="margin-right:10px" @onclick="startGame" class="btn btn-success">START</button><button @onclick="pauseResume" class="btn btn-outline-danger">@prButton</button></div>
    </div>
    <br/>
    <div @ref="divCanvas" id="divCanvas">
        <BECanvas @ref="canvas" Height="440" Width="440"></BECanvas>
    </div>
    <p>@state</p>
    @if(roomContext != null && (roomContext.State == GameState.BlueWon || roomContext.State == GameState.RedWon))
    {
        <br />
        <button @onclick="Reset" class="btn btn-warning">Play again</button>
    }
</div>


@code {
    private HubConnection? hubConnection;
    ElementReference divCanvas;
    protected BECanvasComponent canvas;
    Canvas2DContext canvasContext;
    Room roomContext;
    private Guid roomGuid;
    private string state;
    private string prButton;

    [Parameter]
    public string? RoomGuid
    {
        get => roomGuid.ToString();
        set => roomGuid = Guid.Parse(value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        canvasContext = await canvas.CreateCanvas2DAsync();
        if(hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri($"/gamehub"))
                .AddMessagePackProtocol()
                .Build();
        }
        hubConnection.On<Room>("UpdateRoom", (room_) =>
        {
            roomContext = room_;
            updateState(room_.State);
            updateCanvas();
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
        await jsRuntime.InvokeVoidAsync("JsFunctions.addKeyboardListenerEvent", DotNetObjectReference.Create(this));
        
        await hubConnection.SendAsync("GetGame", roomGuid);
    }

    private void updateState(GameState gState)
    {
        if (gState == GameState.Paused) prButton = "RESUME";
        else prButton = "PAUSE";
        switch(gState)
        {
            case GameState.BlueWon:
                state = "Blue won";
                break;
            case GameState.RedWon:
                state = "Red won";
                break;
            case GameState.Paused:
                state = "Paused";
                break;
            default:
                state = "";
                break;
        }
    }

    private async Task joinBlue()
    {
        await hubConnection.SendAsync("JoinGame", roomContext.Guid, userState.UserName, true);
    }

    private async Task joinRed()
    {
        await hubConnection.SendAsync("JoinGame", roomContext.Guid, userState.UserName, false);
    }

    private async Task startGame()
    {
        await hubConnection.SendAsync("StartGame", roomGuid);
    }

    private async void updateCanvas()
    {
        await canvasContext.ClearRectAsync(0, 0, 440, 440);
        for (int i = 0; i < 12; i++)
        {
            await canvasContext.SetFillStyleAsync("Black");
            await canvasContext.BeginPathAsync();
            await canvasContext.MoveToAsync(i * 40, 0);
            await canvasContext.LineToAsync(i * 40, 0);
            await canvasContext.LineToAsync(i * 40, 440);
            await canvasContext.ClosePathAsync();
            await canvasContext.StrokeAsync();
        }

        foreach(var food in roomContext.FoodList)
        {
            await canvasContext.SetFillStyleAsync("Yellow");
            await canvasContext.BeginPathAsync();
            await canvasContext.RectAsync(food.PositionX * 40, food.PositionY * 40, 40, 40);
            await canvasContext.FillAsync();
            await canvasContext.StrokeAsync();
        }

        for (int i = 0; i < 12; i++)
        {
            await canvasContext.SetFillStyleAsync("Black");
            await canvasContext.BeginPathAsync();
            await canvasContext.MoveToAsync(0, i * 40);
            await canvasContext.LineToAsync(0, i * 40);
            await canvasContext.LineToAsync(440, i * 40);
            await canvasContext.ClosePathAsync();
            await canvasContext.StrokeAsync();
        }
        foreach (var snakeNode in roomContext.BlueSnake.Nodes)
        {
            await canvasContext.SetFillStyleAsync("Blue");
            await canvasContext.BeginPathAsync();
            await canvasContext.RectAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40, 40, 40);
            await canvasContext.FillAsync();
            await canvasContext.StrokeAsync();
            if(snakeNode.IsHead)
            {
                await canvasContext.BeginPathAsync();
                await canvasContext.ArcAsync(snakeNode.PositionX * 40 + 20, snakeNode.PositionY * 40 + 20, 20, 0, 2 * Math.PI);
                await canvasContext.StrokeAsync();
            }
        }

        foreach (var snakeNode in roomContext.RedSnake.Nodes)
        {
            await canvasContext.SetFillStyleAsync("Red");
            await canvasContext.BeginPathAsync();
            //await canvasContext.MoveToAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40);
            await canvasContext.RectAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40, 40, 40);
            await canvasContext.FillAsync();
            await canvasContext.StrokeAsync();
            if(snakeNode.IsHead)
            {
                await canvasContext.BeginPathAsync();
                await canvasContext.ArcAsync(snakeNode.PositionX * 40 + 20, snakeNode.PositionY * 40 + 20, 20, 0, 2 * Math.PI);
                await canvasContext.StrokeAsync();
            }
        }

        await canvasContext.SaveAsync();
    }


    [JSInvokable]
    public async ValueTask KeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowLeft":
                await hubConnection.SendAsync("SendMove", roomGuid, Direction.Left);
                break;
            case "ArrowRight":
                await hubConnection.SendAsync("SendMove", roomGuid, Direction.Right);
                break;
        }
    }

    private async Task Reset()
    {
        await hubConnection.SendAsync("ResetGame",roomContext.Guid);
    }

    private async Task pauseResume()
    {
        if(roomContext.State == GameState.Paused)
            await hubConnection.SendAsync("ResumeGame",roomContext.Guid);
        else
            await hubConnection.SendAsync("PauseGame",roomContext.Guid);
    }

    private async Task leavePlace()
    {
        await hubConnection.SendAsync("LeavePlace",roomGuid);
    }

    private async Task goBack()
    {
        await hubConnection.SendAsync("LeaveRoom", roomContext.Guid);
        NavManager.NavigateTo("/");
    }


}
