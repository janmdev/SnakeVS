@page "/game"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using Blazor.Extensions.Canvas.Canvas2D
@using SnakeVS.Shared

@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject ILoggerFactory LoggerFactory
@inject UserState userState


<PageTitle>Sanke VS</PageTitle>
<p>@userState.UserName</p>
<div @ref="divCanvas" id="divCanvas">
    <BECanvas @ref="canvas" Height="440" Width="440"></BECanvas>
</div>
@if(end == true)
{
    <br />
    <button>Leave</button><button @onclick="Reset">Play again</button>
}

@code {
    private HubConnection? hubConnection;
    ElementReference divCanvas;
    protected BECanvasComponent canvas;
    Canvas2DContext canvasContext;
    Snake snake1;
    Snake snake2;
    private bool end = false;
    List<SnakeFood> foodList = new List<SnakeFood>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if(hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/gamehub"))
                .AddMessagePackProtocol()
                .Build();
        }
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("CreateRoom", Guid.NewGuid(), "Testowy");
        await jsRuntime.InvokeVoidAsync("JsFunctions.addKeyboardListenerEvent", DotNetObjectReference.Create(this));
        //await jsRuntime.InvokeVoidAsync("SetFocusToElement", divCanvas);
        await jsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
        canvasContext = await canvas.CreateCanvas2DAsync();
        snake1 = new Snake(1, new List<SnakeNode>() { new SnakeNode(true, 0, 3), new SnakeNode(false, 0, 2), new SnakeNode(false, 0, 1), new SnakeNode(false, 0, 0) });
        snake2 = new Snake(1, new List<SnakeNode>() { new SnakeNode(true, 5, 5), new SnakeNode(false, 6, 5), new SnakeNode(false, 7,5) });
        snake1.Dir = Direction.Down;
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
        if (end) return;
        foodList.Add(spawnFood());
        switch (snake1.Dir)
        {
            case Direction.Up:
                await snake1.MoveUp();
                break;
            case Direction.Down:
                await snake1.MoveDown();
                break;
            case Direction.Right:
                await snake1.MoveRight();
                break;
            case Direction.Left:
                await snake1.MoveLeft();
                break;
        }
        //await snake1.MoveDown();
        //Console.WriteLine($"{snake1.Nodes.First().PositionX} : {snake1.Nodes.First().PositionY}");
        //Console.WriteLine($"{snake1.Dir}");
        
        if(checkGame())
        {
            await canvasContext.SetFontAsync("40px Arial");
            await canvasContext.SetFillStyleAsync("Blue");
            await canvasContext.FillTextAsync("Blue won", 120, 200);
            end = true;
            this.StateHasChanged();
            return;
        }
        consume(snake1);
        //Console.WriteLine($"{snake1.Nodes.Count}");
        await canvasContext.ClearRectAsync(0, 0, 440, 440);
        for (int i = 0; i < 12; i++)
        {
            await canvasContext.SetFillStyleAsync("Black");
            await canvasContext.BeginPathAsync();
            await canvasContext.MoveToAsync(i * 40, 0);
            await canvasContext.LineToAsync(i * 40, 0);
            await canvasContext.LineToAsync(i * 40, 440);
            await canvasContext.ClosePathAsync();
            await canvasContext.StrokeAsync();
        }

        foreach(var food in foodList)
        {
            await canvasContext.SetFillStyleAsync("Yellow");
            await canvasContext.BeginPathAsync();
            //await canvasContext.MoveToAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40);
            await canvasContext.RectAsync(food.PositionX * 40, food.PositionY * 40, 40, 40);
            await canvasContext.FillAsync();
            await canvasContext.StrokeAsync();
        }

        for (int i = 0; i < 12; i++)
        {
            await canvasContext.SetFillStyleAsync("Black");
            await canvasContext.BeginPathAsync();
            await canvasContext.MoveToAsync(0, i * 40);
            await canvasContext.LineToAsync(0, i * 40);
            await canvasContext.LineToAsync(440, i * 40);
            await canvasContext.ClosePathAsync();
            await canvasContext.StrokeAsync();
        }
        foreach (var snakeNode in snake1.Nodes)
        {
            await canvasContext.SetFillStyleAsync("Red");
            await canvasContext.BeginPathAsync();
            //await canvasContext.MoveToAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40);
            await canvasContext.RectAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40, 40, 40);
            await canvasContext.FillAsync();
            await canvasContext.StrokeAsync();
            if(snakeNode.IsHead)
            {
                await canvasContext.BeginPathAsync();
                await canvasContext.ArcAsync(snakeNode.PositionX * 40 + 20, snakeNode.PositionY * 40 + 20, 20, 0, 2 * Math.PI);
                await canvasContext.StrokeAsync();
            }
        }

        foreach (var snakeNode in snake2.Nodes)
        {
            await canvasContext.SetFillStyleAsync("Blue");
            await canvasContext.BeginPathAsync();
            //await canvasContext.MoveToAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40);
            await canvasContext.RectAsync(snakeNode.PositionX * 40, snakeNode.PositionY * 40, 40, 40);
            await canvasContext.FillAsync();
            await canvasContext.StrokeAsync();
            if(snakeNode.IsHead)
            {
                await canvasContext.BeginPathAsync();
                await canvasContext.ArcAsync(snakeNode.PositionX * 40 + 20, snakeNode.PositionY * 40 + 20, 20, 0, 2 * Math.PI);
                await canvasContext.StrokeAsync();
            }
        }

        await canvasContext.SaveAsync();
    }

    private bool checkGame()
    {
        return (snake1.Nodes.Where(p => !p.IsHead).Any(p => p.PositionX == snake1.Head.PositionX && p.PositionY == snake1.Head.PositionY)) ||
                (snake2.Nodes.Any(p => p.PositionX == snake1.Head.PositionX && p.PositionY == snake1.Head.PositionY)) ||
                snake1.Head.PositionX < 0 || snake1.Head.PositionY < 0 || snake1.Head.PositionX > 10 || snake1.Head.PositionY > 10;
    }

    private SnakeFood spawnFood()
    {
        int limit = 12 * 12 - foodList.Count - snake1.Nodes.Count - snake2.Nodes.Count;
        Random rng = new Random();
        int foodIndex = rng.Next(limit);
        int k = 0;
        for(int i = 0; i<12; i++)
        {
            for(int j = 0; j < 12; j++)
            {
                if(!foodList.Any(p => p.PositionX == i && p.PositionY == j) && 
                !snake1.Nodes.Any(p => p.PositionX == i && p.PositionY == j) && 
                !snake2.Nodes.Any(p => p.PositionX == i && p.PositionY == j))
                {
                    if (k == foodIndex)
                    {
                        return new SnakeFood()
                            {
                                PositionX = i,
                                PositionY = j
                            };
                    }
                    else k++;
                }
            }
        }
        return null;
    }

    private void consume(Snake snake)
    {
        var foodToConsume = foodList.FirstOrDefault(p => p.PositionX == snake.Head.PositionX && p.PositionY == snake.Head.PositionY);
        if (foodToConsume == null) return;
        snake.Consume(foodToConsume);
        foodList.Remove(foodToConsume);
    }

    [JSInvokable]
    public async ValueTask KeyDown(KeyboardEventArgs e)
    {
        //Console.WriteLine(e.Key);
        switch (e.Key)
        {
            case "ArrowLeft":
                snake1.changeDirection(Direction.Left);
                break;
            case "ArrowRight":
                snake1.changeDirection(Direction.Right);
                break;
        }
    }

    public void Reset()
    {
        end = false;
        snake1 = new Snake(1, new List<SnakeNode>() { new SnakeNode(true, 0, 3), new SnakeNode(false, 0, 2), new SnakeNode(false, 0, 1), new SnakeNode(false, 0, 0) });
        snake2 = new Snake(1, new List<SnakeNode>() { new SnakeNode(true, 5, 5), new SnakeNode(false, 6, 5), new SnakeNode(false, 7,5) });
        snake1.Dir = Direction.Down;
        foodList.Clear();
    }
}
