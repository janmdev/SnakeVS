@page "/"
@using Blazored.LocalStorage
@using SnakeVS.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using MessagePack
@using SnakeVS.Shared.Response

@inject UserState userState
@inject NavigationManager NavManager
@inject ILocalStorageService localStorageConnector;

@if (rooms != null)
{
    <div class="container-fluid" style="max-width: 500px;">
        <input @bind-value="userNameValue" class="form-control" placeholder="Username"/>
        <table class="table">
            <thead>
            <tr>
                <th>

                </th>
                <th>
                    Nazwa
                </th>
                <th style="text-align: center;">
                    C
                </th>
                <th>

                </th>
                <th>

                </th>
            </tr>
            </thead>
            @foreach (var room in rooms)
            {
                <tr>
                    <th style="text-align: center">
                        @lastRoom(room.Id)
                    </th>
                    <td>
                        @room.Name
                    </td>
                    <td style="text-align: center;">
                        @room.PlayerCount / 2
                    </td>
                    <td style="text-align: center;">
                        <div><button @onclick="() => JoinRoom(room.Id)" type="button" class="btn btn-primary" style="width: 80px;">Enter</button></div>
                    </td>
                    <td style="text-align: center;">
                        <div><button @onclick="() => DeleteRoom(room.Id)" type="button" class="btn btn-danger" style="width: 80px;">Delete</button></div>
                    </td>
                </tr>
            }
            <tr>
                <td>

                </td>
                <td>
                    <input type="text" @bind-value="roomNameValue" class="form-control" placeholder="New room"/>
                </td>
                <td>

                </td>
                <td style="text-align: center;">
                    <div><button @onclick="() => CreateRoom(roomNameValue)" type="button" class="btn btn-success" style="width: 80px;">Add</button></div>
                </td>
            </tr>
        </table>
    </div>
}
else
{
    <p>Loading rooms...</p>
}
@code {
    private HubConnection? hubConnection;
    private string userNameValue;
    private string roomNameValue;
    private List<ListedRoom> rooms;
    private LocalStorageService localStorage;
    private Guid lastRoomGuid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        localStorage = new LocalStorageService(localStorageConnector);
        userNameValue = await localStorage.GetUserName();
        lastRoomGuid = await localStorage.GetLastRoom();
        if(hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri($"/roomshub"))
                .AddMessagePackProtocol()
                .Build();
        }

        hubConnection.On<ListedRoom[]>("GetRooms", (rooms_) =>
        {
            rooms = new List<ListedRoom>(rooms_);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("ListRooms");
    }

    private async Task JoinRoom(Guid roomGuid)
    {
        if (String.IsNullOrEmpty(userNameValue)) return;
        userState.UserName = userNameValue;
        await localStorage.SetUserName(userNameValue);
        await localStorage.SetLastRoom(roomGuid);
        NavManager.NavigateTo($"/game/{roomGuid}");
    }

    private async Task CreateRoom(string roomName)
    {
        if (!rooms.Any(p => p.Name.Trim().ToUpper() == roomName))
        {
            await hubConnection.SendAsync("CreateRoom", roomName);
            roomNameValue = "";
        }
    }

    private string lastRoom(Guid guid)
    {
        if (guid == lastRoomGuid) return "☀";
        return "";

    }

    private async Task DeleteRoom(Guid roomId)
    {
        await hubConnection.SendAsync("DeleteRoom", roomId);
    }

}
